!https://github.com/tinkerpop/pipes/raw/master/doc/images/duck-plumber.jpg!

A side-effect based pipe will emit the incoming object unaltered. However, during that process, a computation is effected. This computation can be used to yield a computational side-effect.

h2. Generic SideEffect Pipe

The generic side-effect pipe is @SideEffectFunctionPipe@. A @SideEffectFunctionPipe@ takes a @PipeFunction@ (see [[Pipe Types]]) that computes on @S@ and emits @S@. However, the provided @PipeFunction@ provides a side-effect computation. An example @PipeFunction@ is provided below:

```java
public class CharTotalPipeFunction implements PipeFunction<String, Object> {
  
  private final AtomicInteger count;
  
  public CharCountPipeFunction(AtomicInteger count) {
    this.count = count;
  }

  public Object compute(String argument) {
     this.count.getAndAdd(argument.length())
     return null;
  }
}
```

When put in the context of a @SideEffectClosurePipe@, the code looks as follows:

```java
AtomicInteger count = new AtomicInteger(0);
Pipe<String, String> pipe = new SideEffectFunctionPipe<String>(new CharTotalPipeFunction(count));
pipe.setStarts(Arrays.asList("tell", "me", "your", "name"));
// the results of the iteration are: "tell", "me", "your", "name"
assert count.get() == 14;
```