!https://github.com/tinkerpop/pipes/raw/master/doc/images/duck-plumber.jpg!

The @FluentPipeline@ class extends @Pipeline@. It is a utility for constructing pipelines in a "fluent":http://en.wikipedia.org/wiki/Fluent_interface style. @FluentPipeline@ provides most of the functionality that is provided by "Gremlin":http://gremlin.tinkerpop.com, but in a pure Java syntax and environment.

h2. FluentPipeline Methods

For every pipe distributed with Pipes, there is a respective @FluentPipeline@ method. Moreover, in many cases, there are multiple @FluentPipeline@ methods (e.g. verbose/concise, "overloaded methods":http://en.wikipedia.org/wiki/Function_overloading). In general, these methods have the following signature, where the @pipeName@ method doesn't really exist and is only used here for demonstration purposes.

```java
public FluentPipeline pipeName(Object pipeConstructionArgument);
```

The method @pipeName()@ will update the current state of the @this@ @FluentPipeline@ by appending a new pipe (as reference by @pipeName()@) to @this@ @FluentPipeline@ and then return the @FluentPipeline@. Given that each method of @FluentPipeline@ returns a @FluentPipeline@, it is possible to chain method calls together to construct a pipeline in a single line of code.

h2. FluentPipeline Construction

The example below demonstrates how to use the @FluentPipeline@ chaining/combinator approach.

```java
g = ... // a reference to a Blueprints graph
FluentPipeline pipe = new FluentPipeline();
pipe.start(g.getVertex(1)).out("knows").property("name");
```

At the end of line 3, @pipe@ is a @FluentPipeline@ that will determine the name of the vertice's that vertex 1 knows. Beyond being able to easily construct pipelines, there are various utility methods provided with @FluentPipeline@. For example, give the @pipe@ constructed in the previous example:

```java
pipe.next() // the next String name in the pipe
pipe.next(5) // the next 5 String names in the pipe as a List
pipe.iterate() // while(true) { pipe.next() } (useful when only side-effects are desired)
pipe.toList() // fill a list of all the elements in the pipe
pipe.count() // the number of objects in the pipe
...
```

h2. Using PipeFunctions with FluentPipeline

Many of the pipes in Pipes make use of @PipeFunction@. Unfortunately, the way in which "anonymous functions":http://en.wikipedia.org/wiki/Anonymous_function are expressed in Java is through "inner-classes":http://en.wikipedia.org/wiki/Inner_class which can be quite verbose. An example below is presented that uses the @FilterFunctionPipe@ to find all the vertices that vertex 1 knows whose name starts with 'j'.

```java
new FluentPipeline(g.getVertex(1)).out("knows").property("name").filter(new PipeFunction<String,Boolean>() {
  public Boolean compute(String argument) {
    return argument.startsWith("j");
  }
});
```

In short, a @PipeFunction@ is constructed on the fly with the abstract @compute()@ method defined inline. Of course, the last statement simply returns the @FluentPipeline@ and thus, more pipes can be appended as demonstrated below. The example below traverses to those things that were created by vertex 1's friends whose names start with 'j'.

```java
new FluentPipeline(g.getVertex(1)).out("knows").property("name").filter(new PipeFunction<String,Boolean>() {
  public Boolean compute(String argument) {
    return argument.startsWith("j");
  }
}).back(2).out("created");
```

Note that this verbosity is greatly controlled by Pipes-based languages like Gremlin (based on "Groovy":http://groovy.codehaus.org/):

```groovy
g.v(1).out('knows').name.filter{it.startsWith('j')}.back(2).out('created')
```

h2. Conclusion

@FluentPipeline@ makes it easy to construct complicated pipelines using the fluent pattern. Pipes-based languages like "Gremlin":http://gremlin.tinkerpop.com make heavy use of this class. For developers wanting a pure Java environment for constructing and evaluating pipeline expressions, @FluentPipeline@ is a great utility. However, given the verbosity of the in-line @PipeFunction@ construction, making use of a "JVM language":http://en.wikipedia.org/wiki/List_of_JVM_languages that has anonymous/lambda functions or closures makes good sense.
